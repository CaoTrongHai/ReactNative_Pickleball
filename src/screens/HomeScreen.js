import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  FlatList,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  StyleSheet,
  ScrollView,
  Dimensions,
  TextInput,
} from "react-native";
import axios from "axios";

const BASE_URL = "http://localhost:9999";
const screenWidth = Dimensions.get("window").width;

const HomeScreen = ({ navigation }) => {
  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");

  // D·ªØ li·ªáu tin t·ª©c gi·∫£ l·∫≠p
  const newsData = [
    {
      id: 1,
      title: "C√°ch ch·ªçn v·ª£t Pickleball ph√π h·ª£p",
      image: require("../images/new1.png"),
      description: [
        "Ch·ªçn v·ª£t Pickleball ph√π h·ª£p l√† b∆∞·ªõc quan tr·ªçng ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t ch∆°i. B√†i vi·∫øt n√†y s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c√°ch ch·ªçn v·ª£t d·ª±a tr√™n tr·ªçng l∆∞·ª£ng, k√≠ch th∆∞·ªõc v√† ch·∫•t li·ªáu.",
        "Tr·ªçng l∆∞·ª£ng c·ªßa v·ª£t ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng ki·ªÉm so√°t v√† s·ª©c m·∫°nh c·ªßa c√∫ ƒë√°nh. V·ª£t nh·∫π ph√π h·ª£p v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, trong khi v·ª£t n·∫∑ng h∆°n gi√∫p tƒÉng l·ª±c ƒë√°nh.",
        "K√≠ch th∆∞·ªõc v·ª£t c≈©ng quan tr·ªçng kh√¥ng k√©m. V·ª£t l·ªõn h∆°n cung c·∫•p di·ªán t√≠ch ti·∫øp x√∫c b√≥ng l·ªõn h∆°n, gi√∫p b·∫°n d·ªÖ d√†ng ki·ªÉm so√°t b√≥ng h∆°n.",
        "Ch·∫•t li·ªáu v·ª£t c≈©ng c·∫ßn ƒë∆∞·ª£c xem x√©t. V·ª£t l√†m t·ª´ composite nh·∫π v√† b·ªÅn, trong khi v·ª£t graphite cung c·∫•p ƒë·ªô ch√≠nh x√°c cao h∆°n.",
      ],
    },
    {
      id: 2,
      title: "Top 5 ƒë·ªãa ƒëi·ªÉm ch∆°i Pickleball t·∫°i H√† N·ªôi",
      image: require("../images/new2.png"),
      description: [
        "H√† N·ªôi l√† th√†nh ph·ªë c√≥ nhi·ªÅu ƒë·ªãa ƒëi·ªÉm ch∆°i Pickleball ch·∫•t l∆∞·ª£ng. B√†i vi·∫øt n√†y s·∫Ω gi·ªõi thi·ªáu 5 ƒë·ªãa ƒëi·ªÉm h√†ng ƒë·∫ßu, bao g·ªìm th√¥ng tin v·ªÅ gi√° v√©, ch·∫•t l∆∞·ª£ng s√¢n v√† d·ªãch v·ª• ƒëi k√®m.",
        "1. **S√¢n Pickleball H·ªì T√¢y**: N·∫±m ngay c·∫°nh h·ªì T√¢y, s√¢n n√†y c√≥ view ƒë·∫πp v√† ch·∫•t l∆∞·ª£ng s√¢n t·ªët. Gi√° v√© ch·ªâ 100.000 VND/gi·ªù.",
        "2. **Trung t√¢m th·ªÉ thao Thanh Xu√¢n**: S√¢n r·ªông r√£i, ƒë∆∞·ª£c trang b·ªã ƒë·∫ßy ƒë·ªß ti·ªán nghi. Gi√° v√© 150.000 VND/gi·ªù.",
        "3. **C√¥ng vi√™n Th·ªëng Nh·∫•t**: S√¢n ngo√†i tr·ªùi, ph√π h·ª£p cho nh·ªØng ng∆∞·ªùi y√™u th√≠ch kh√¥ng gian tho√°ng ƒë√£ng. Gi√° v√© 50.000 VND/gi·ªù.",
        "4. **CLB Pickleball H√† N·ªôi**: N∆°i t·∫≠p trung c·ªßa c√°c tay v·ª£t chuy√™n nghi·ªáp. Gi√° v√© 200.000 VND/gi·ªù.",
        "5. **S√¢n Pickleball Long Bi√™n**: S√¢n m·ªõi, ƒë∆∞·ª£c ƒë·∫ßu t∆∞ hi·ªán ƒë·∫°i. Gi√° v√© 120.000 VND/gi·ªù.",
      ],
    },
    {
      id: 3,
      title: "L·ª£i √≠ch s·ª©c kh·ªèe t·ª´ vi·ªác ch∆°i Pickleball",
      image: require("../images/new3.png"),
      description: [
        "Pickleball kh√¥ng ch·ªâ l√† m·ªôt m√¥n th·ªÉ thao gi·∫£i tr√≠ m√† c√≤n mang l·∫°i nhi·ªÅu l·ª£i √≠ch s·ª©c kh·ªèe. B√†i vi·∫øt n√†y s·∫Ω ph√¢n t√≠ch c√°c l·ª£i √≠ch nh∆∞ c·∫£i thi·ªán tim m·∫°ch, tƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° b·∫Øp v√† gi·∫£m cƒÉng th·∫≥ng.",
        "1. **C·∫£i thi·ªán tim m·∫°ch**: Pickleball l√† m√¥n th·ªÉ thao v·∫≠n ƒë·ªông to√†n th√¢n, gi√∫p tƒÉng c∆∞·ªùng s·ª©c kh·ªèe tim m·∫°ch v√† tu·∫ßn ho√†n m√°u.",
        "2. **TƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° b·∫Øp**: C√°c ƒë·ªông t√°c di chuy·ªÉn v√† ƒë√°nh b√≥ng gi√∫p ph√°t tri·ªÉn c∆° b·∫Øp ch√¢n, tay v√† l∆∞ng.",
        "3. **Gi·∫£m cƒÉng th·∫≥ng**: Ch∆°i Pickleball gi√∫p gi·∫£i t·ªèa stress, tƒÉng c∆∞·ªùng endorphin v√† c·∫£i thi·ªán t√¢m tr·∫°ng.",
        "4. **TƒÉng c∆∞·ªùng s·ª± linh ho·∫°t**: C√°c ƒë·ªông t√°c trong Pickleball gi√∫p c·∫£i thi·ªán s·ª± linh ho·∫°t v√† ph·∫£n x·∫° c·ªßa c∆° th·ªÉ.",
      ],
    },
  ];

  useEffect(() => {
    const fetchData = async () => {
      try {
        const categoryRes = await axios.get(`${BASE_URL}/categories`);
        const productRes = await axios.get(`${BASE_URL}/products`);
        setCategories(categoryRes.data.data);
        setProducts(productRes.data.data.docs);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#007bff" />
        <Text style={styles.loadingText}>ƒêang t·∫£i d·ªØ li·ªáu...</Text>
      </View>
    );
  }

  // L·ªçc s·∫£n ph·∫©m theo t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredProducts = products.filter((item) =>
    item.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Render danh m·ª•c s·∫£n ph·∫©m
  const renderCategoryItem = ({ item }) => (
    <TouchableOpacity
      style={styles.categoryItem}
      onPress={() =>
        navigation.navigate("CategoryProducts", { categoryId: item._id })
      }
    >
      <Image
        source={{ uri: `${BASE_URL}${item.image}` }}
        style={styles.categoryImage}
      />
      <Text style={styles.categoryText}>{item.name}</Text>
    </TouchableOpacity>
  );

  // Render s·∫£n ph·∫©m n·ªïi b·∫≠t
  const renderProductItem = ({ item }) => (
    <View style={styles.productItem}>
      <Image
        source={{ uri: `${BASE_URL}${item.images[0].url}` }}
        style={styles.productImage}
      />
      <Text style={styles.productName}>{item.name}</Text>
      <Text numberOfLines={2} style={styles.productDescription}>
        {item.description}
      </Text>
      <Text style={styles.productPrice}>${item.price}</Text>
      <TouchableOpacity
        style={styles.detailButton}
        onPress={() => navigation.navigate("ProductDetail", { product: item })}
      >
        <Text style={styles.detailButtonText}>Xem chi ti·∫øt</Text>
      </TouchableOpacity>
    </View>
  );

  // Render tin t·ª©c
  const renderNewsItem = ({ item }) => (
    <TouchableOpacity
      style={styles.newsItem}
      onPress={() => navigation.navigate("NewsDetail", { news: item })}
    >
      <Image source={item.image} style={styles.newsImage} />
      <View style={styles.newsContent}>
        <Text style={styles.newsTitle}>{item.title}</Text>
        <Text style={styles.newsDescription} numberOfLines={3}>
          {item.description.join(" ")}
        </Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <ScrollView style={styles.container}>
      {/* Banner */}
      <Image source={require("../images/banner.png")} style={styles.banner} />

      {/* √î t√¨m ki·∫øm */}
      <TextInput
        style={styles.searchInput}
        placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m..."
        value={searchQuery}
        onChangeText={(text) => setSearchQuery(text)}
      />

      {/* Danh m·ª•c s·∫£n ph·∫©m */}
      <Text style={styles.sectionTitle}>Danh m·ª•c s·∫£n ph·∫©m</Text>
      <FlatList
        horizontal
        data={categories}
        keyExtractor={(item) => item._id}
        renderItem={renderCategoryItem}
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.categoryList}
      />

      {/* S·∫£n ph·∫©m n·ªïi b·∫≠t */}
      <Text style={styles.sectionTitle}>S·∫£n ph·∫©m n·ªïi b·∫≠t</Text>
      <FlatList
        horizontal
        data={filteredProducts}
        keyExtractor={(item) => item._id}
        renderItem={renderProductItem}
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.productList}
      />

      {/* Tin t·ª©c m·ªõi nh·∫•t */}
      <Text style={styles.sectionTitle}>Tin t·ª©c m·ªõi nh·∫•t</Text>
      <FlatList
        horizontal
        data={newsData}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderNewsItem}
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.newsList}
      />

      {/* M·∫πo ch∆°i Pickleball */}
      <Text style={styles.sectionTitle}>M·∫πo ch∆°i Pickleball</Text>
      <View style={styles.tipsContainer}>
        <Text style={styles.tipItem}>
          üéæ Gi·ªØ v·ª£t th·∫•p khi ph√≤ng th·ªß ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n.
        </Text>
        <Text style={styles.tipItem}>
          üèÉ‚Äç‚ôÇÔ∏è Lu√¥n di chuy·ªÉn ƒë·ªÉ gi·ªØ v·ªã tr√≠ t·ªët tr√™n s√¢n.
        </Text>
        <Text style={styles.tipItem}>
          üîÑ T·∫≠p luy·ªán k·ªπ thu·∫≠t dinks ƒë·ªÉ ki·ªÉm so√°t b√≥ng t·ªët h∆°n.
        </Text>
        <Text style={styles.tipItem}>
          üí™ T·∫≠p trung v√†o chi·∫øn thu·∫≠t ƒë√¥i ƒë·ªÉ ph·ªëi h·ª£p v·ªõi ƒë·ªìng ƒë·ªôi.
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f8f9fa", padding: 10 },
  loaderContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#fff",
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: "#555",
  },
  banner: {
    width: screenWidth - 20,
    height: 200,
    borderRadius: 15,
    marginBottom: 20,
  },
  searchInput: {
    height: 40,
    borderColor: "#ddd",
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 10,
    backgroundColor: "#fff",
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  categoryList: { paddingBottom: 10 },
  categoryItem: { marginRight: 15, alignItems: "center" },
  categoryImage: { width: 80, height: 80, borderRadius: 10, marginBottom: 5 },
  categoryText: { fontSize: 14, color: "#555" },
  productList: { paddingBottom: 20 },
  productItem: {
    backgroundColor: "#fff",
    padding: 15,
    borderRadius: 10,
    marginRight: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    width: 280,
  },
  productImage: {
    width: "100%",
    height: 300,
    borderRadius: 10,
    marginBottom: 10,
  },
  productName: { fontSize: 14, fontWeight: "bold", color: "#333" },
  productDescription: { fontSize: 14, color: "#777", marginBottom: 10 },
  productPrice: { fontSize: 16, fontWeight: "bold", color: "#e63946" },
  detailButton: {
    backgroundColor: "#007bff",
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
    alignItems: "center",
  },
  detailButtonText: { color: "#fff", fontWeight: "bold" },
  newsList: { paddingBottom: 20 },
  newsItem: {
    backgroundColor: "#fff",
    borderRadius: 10,
    marginRight: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    width: 280,
  },
  newsImage: {
    width: "100%",
    height: 150,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
  },
  newsContent: {
    padding: 15,
  },
  newsTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 10,
  },
  newsDescription: {
    fontSize: 14,
    color: "#777",
  },
  tipsContainer: {
    backgroundColor: "#fff",
    padding: 15,
    borderRadius: 10,
    marginTop: 15,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tipItem: {
    fontSize: 16,
    color: "#333",
    marginBottom: 8,
  },
});

export default HomeScreen;
